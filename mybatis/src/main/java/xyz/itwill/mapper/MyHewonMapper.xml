<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyHewonMapper">
	<insert id="insertHewon" parameterType="MyHewon">
		insert into myhewon
		values(#{id}, #{name}, #{phone}, #{email}, #{status})
	</insert>

	<resultMap type="MyHewon" id="myHewonResultMap">
		<id column="hewon_id" property="id" />
		<result column="hewon_name" property="name" />
		<result column="hewon_phone" property="phone" />
		<result column="hewon_email" property="email" />
		<result column="hewon_status" property="status" />
	</resultMap>

	<select id="selectHewonList" resultMap="myHewonResultMap">
		select hewon_id,
		hewon_name, hewon_phone, hewon_email, hewon_status from myhewon order
		by hewon_id
	</select>

	<!-- discriminator : 검색행의 컬럼값을 비교하여 매핑정보를 다르게 제공하기 위한 엘리먼트 -->
	<!-- => 하위 엘리먼트로 case 엘리먼트를 사용하여 검색행의 컬럼값을 비교하여 매핑정보 제공 -->
	<!-- javaType 속성 : 검색행의 비교 컬럼값에 대한 Java 자료형을 속성값으로 설정 -->
	<!-- => Java 자료형 대신 typeAlias 엘리먼트로 제공된 별칭을 사용 가능 -->
	<!-- column 속성 : 검색행의 비교 컬럼명을 속성값으로 설정 -->
	<!-- <resultMap type="MyHewon" id="myHewonDiscriminatorResultMap"> <discriminator 
		javaType="int" column="hewon_status"> <case value="1"> <id column="hewon_id" 
		property="id"/> <result column="hewon_status" property="status"/> </case> 
		<case value="2"> <id column="hewon_id" property="id"/> <result column="hewon_name" 
		property="name"/> <result column="hewon_status" property="status"/> </case> 
		<case value="3"> <id column="hewon_id" property="id"/> <result column="hewon_name" 
		property="name"/> <result column="hewon_phone" property="phone"/> <result 
		column="hewon_status" property="status"/> </case> <case value="4"> <id column="hewon_id" 
		property="id"/> <result column="hewon_name" property="name"/> <result column="hewon_phone" 
		property="phone"/> <result column="hewon_email" property="email"/> <result 
		column="hewon_status" property="status"/> </case> </discriminator> </resultMap> -->

	<!-- 모든 case 엘리먼트에 공통적인 매핑정보가 존재할 경우 discriminator 엘리먼트가 아닌 다른 하위 엘리먼트를 
		사용하여 매핑 정보 제공 가능 -->
	<!-- <resultMap type="MyHewon" id="myHewonDiscriminatorResultMap"> <id column="hewon_id" 
		property="id"/> <result column="hewon_status" property="status"/> <discriminator 
		javaType="int" column="hewon_status"> <case value="2"> <result column="hewon_name" 
		property="name"/> </case> <case value="3"> <result column="hewon_name" property="name"/> 
		<result column="hewon_phone" property="phone"/> </case> <case value="4"> 
		<result column="hewon_name" property="name"/> <result column="hewon_phone" 
		property="phone"/> <result column="hewon_email" property="email"/> </case> 
		</discriminator> </resultMap> -->

	<resultMap type="MyHewon" id="myHewonOneResultMap">
		<id column="hewon_id" property="id" />
		<result column="hewon_status" property="status" />
	</resultMap>

	<!-- extends 속성 : resultMap 엘리먼트의 식별자를 속성값으로 설정 -->
	<!-- => 다른 resultMap 엘리먼트의 매핑정보를 상속받아 사용하기 위한 속성 -->
	<resultMap type="MyHewon" id="myHewonTwoResultMap"
		extends="myHewonOneResultMap">
		<result column="hewon_name" property="name" />
	</resultMap>

	<resultMap type="MyHewon" id="myHewonThreeResultMap"
		extends="myHewonTwoResultMap">
		<result column="hewon_phone" property="phone" />
	</resultMap>

	<resultMap type="MyHewon" id="myHewonFourResultMap"
		extends="myHewonThreeResultMap">
		<result column="hewon_email" property="email" />
	</resultMap>

	<resultMap type="MyHewon" id="myHewonDiscriminatorResultMap">
		<discriminator javaType="int" column="hewon_status">
			<!-- case 엘리먼트에 resultMap 속성을 사용하여 다른 resultMap 엘리먼트의 매핑정보를 제공받아 사용 가능 -->
			<case value="1" resultMap="myHewonOneResultMap" />
			<case value="2" resultMap="myHewonTwoResultMap" />
			<case value="3" resultMap="myHewonThreeResultMap" />
			<case value="4" resultMap="myHewonFourResultMap" />
		</discriminator>
	</resultMap>

	<select id="selectDiscriminatorHewonList"
		resultMap="myHewonDiscriminatorResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email,
		hewon_status from myhewon order by hewon_id
	</select>

	<!-- 매퍼에 등록된 SQL 명령에 필요한 값을 전달하는 방법 -->
	<!-- => 전달값은 SQL 명령에서 #{변수명|필드명|맵키} 형식으로 표현하여 사용 -->
	<!-- 1.XML 기반의 매퍼 파일에서 SQL 명령이 등록된 엘리먼트의 parameterType 속성값으로 Java 자료형(별칭)을 
		설정하여 값을 전달받아 SQL 명령에서 사용 -->
	<!-- => 단일값을 전달받기 위해 parameterType 속성에 원시형(PrimitiveType - Wrapper 클래스) 
		또는 String 클래스를 속성값으로 설정 - SQL 명령에서는 #{변수명} 형식으로 전달값 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 JavaBean 클래스(DTO)를 속성값으로 설정 - SQL 
		명령에서는 #{필드명} 형식으로 전달값(필드값) 사용 -->
	<!-- => 다수값을 전달받기 위해 parameterType 속성에 HashMap 클래스(Map 인터페이스)를 속성값으로 설정 
		- SQL 명령에서는 #{맵키} 형식으로 전달값(맵값) 사용 -->
	<!-- 2.Interface 기반의 매퍼 파일에서 추상메소드의 매개변수에 @Param 어노테이션을 설정하여 매개변수의 전달되어 
		저장된 값을 SQL 명령에서 사용 -->
	<!-- => 매퍼 바인딩을 한 경우 XML 기반의 매퍼 파일의 엘리먼트에서 SQL 명령에 전달값을 사용 가능 -->
	<!-- => Interface 기반의 매퍼 파일의 추상메소드 매개변수로 전달받은 값을 XML 기반의 매퍼 파일의 엘리먼트에서 사용할 
		경우 parameterType 속성을 반드시 생략 -->

	<!-- 공개범위를 전달받아 MYHEWON 테이블에 저장된 회원정보 중 해당 공개범위의 회원정보를 검색하여 검색결과를 객체로 제공하는 
		엘리먼트 -->
	<!-- => 값을 하나만 전달받아 SQL 명령에서 사용할 경우 parameterType 속성값으로 원시형 (Wrapper 클래스) 
		또는 String 클래스를 설정하고 SQL 명령에서는 #{변수명} 형식으로 전달값 표현 -->
	<!-- => 변수명은 어떤 이름을 사용해도 상관 없으며 식별자 작성 규칙에 맞게 작성 -->
	<!-- <select id="selectStatusHewonList" parameterType="int" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon where hewon_status=#{status} order by hewon_id </select> -->

	<!-- XML 기반의 매퍼 파일의 엘리먼트에서는 parameterType 속성값으로 원시형(Wrapper 클래스) 또는 String 
		클래스를 설정하여 값을 하나만 전달받은 경우 parameterType 속성 생략 가능 -->
	<select id="selectStatusHewonList" resultMap="myHewonResultMap">
		select hewon_id,
		hewon_name, hewon_phone, hewon_email, hewon_status from myhewon
		where hewon_status=#{status} order by hewon_id
	</select>

	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 회원정보 중 해당 이름과 이메일의 회원 아이디를 검색하여 검색결과를 
		문자열로 제공하는 엘리먼트 -->
	<!-- => 값을 여러개 전달받아 SQL 명령에서 사용하고자 할 경우 parameterType 속성값으로 JavaBean 클래스(DTO)를 
		설정하여 객체를 전달받아 SQL 명령에서 #{필드명} 형식으로 표현하여 객체의 필드값 사용 -->
	<!-- <select id="selectBeanHewonId" parameterType="MyHewon" resultType="string"> 
		select hewon_id from myhewon where hewon_name=#{name} and hewon_email=#{email} 
		</select> -->

	<!-- 매퍼 바인딩하여 Interface 기반의 매퍼 파일을 사용할 경우 전달값에 상관없이 parameterType 속성 생략 
		가능 -->
	<select id="selectBeanHewonId" resultType="string">
		select hewon_id from
		myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>

	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 회원정보 중 해당 이름과 이메일의 회원 아이디를 검색하여 검색결과를 
		문자열로 제공하는 엘리먼트 -->
	<!-- => 값을 여러개 전달받아 SQL 명령에서 사용하고자 할 경우 parameterType 속성값으로 HashMap 클래스(Map 
		인터페이스)를 설정하여 Map 객체를 전달받아 SQL 명령에서 #{맵키} 형식으로 표현하여 Map 객체의 맵값 사용 -->
	<select id="selectMapHewonId" parameterType="map"
		resultType="string">
		select hewon_id from myhewon where hewon_name=#{name} and
		hewon_email=#{email}
	</select>

	<insert id="insertMapHewon" parameterType="map">
		insert into myhewon
		values(#{id}, #{name}, #{phone}, #{email}, #{status})
	</insert>

	<!-- select 엘리먼트의 resultType 속성값을 HashMap 클래스(Map 인터페이스)로 설정하면 하나의 검색행을 
		Map 객체로 생성하여 제공 -->
	<!-- => 검색행의 컬럼명을 맵키로 매핑하고 컬럼값을 엔트리의 맵값으로 매핑하여 엔트리로 추가 -->
	<!-- => 검색행의 컬럼명은 대문자로 검색되어 맵키 매핑 처리 -->
	<select id="selectMapHewonList" resultType="map">
		select hewon_id,
		hewon_name, hewon_phone, hewon_email, hewon_status from myhewon order
		by hewon_id
	</select>

	<!-- 이름과 이메일을 전달받아 MYHEWON 테이블에 저장된 회원정보 중 해당 이름과 이메일의 회원 아이디를 검색하여 검색결과를 
		문자열로 제공하는 엘리먼트 -->
	<!-- => 매퍼 바인딩한 경우 Interface 기반의 매퍼 파일에서 추상메소드의 매개변수에 전달되어 저장된 값을 @Param 
		어노테이션의 value 속성값으로 제공받아 SQL 명령에서 #{속성값} 형식으로 표현하여 매개변수의 저장값을 사용 - parameterType 
		속성을 반드시 생략 -->
	<select id="selectParamHewonId" resultType="string">
		select hewon_id from
		myhewon where hewon_name=#{name} and hewon_email=#{email}
	</select>

	<!-- 검색대상과 검색단어를 전달받아 MYHEWON 테이블에 저장된 회원정보에서 검색대상(컬럼명)에 검색단어(비교값)가 컬럼에 
		저장된 회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<!-- #{변수명|필드명|맵키} : '전달값' - 전달값을 SQL 명령에서 문자값으로 사용 -->
	<!-- ${변수명|필드명|맵키} : 전달값 - 전달값을 SQL 명령에서 부분 명령으로 사용 -->
	<!-- => ibitis 프레임워크에서는 $변수명|필드명|맵키$ 형식으로 표현 -->
	<!-- => $표현식은 InSQL 공격에 취약하므로 사용하는 것을 비권장 -->
	<!-- <select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon where ${searchColumn}=#{searchKeyword} order by hewon_id </select> -->

	<!-- 검색대상과 검색단어를 전달받아 MYHEWON 테이블에 저장된 회원정보를 검색대상(컬럼명)에 검색단어(비교값)가 컬럼에 포함된 
		회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<!-- <select id="selectSearchHewonList" parameterType="map" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon where ${searchColumn} like '%'||#{searchKeyword}||'%' order by hewon_id 
		</select> -->

	<select id="selectSearchHewonList" parameterType="map"
		resultMap="myHewonResultMap">
		<!-- bind : SQL 명령에서 사용하기 위한 값을 제공하는 엘리먼트 -->
		<!-- => parameterType 속성값으로 전달받은 값을 변경하여 SQL 명령에서 사용할 목적으로 선언 -->
		<!-- => bind 엘리먼트로 제공된 값은 SQL 명령에서 #{이름} 형식으로 표현하여 사용 -->
		<!-- name 속성 : SQL 명령에서 사용할 이름을 속성값으로 설정 -->
		<!-- value 속성 : SQL 명령에서 사용할 값을 속성값으로 설정 -->
		<!-- => parameterType 속성값으로 전달받은 값에 문자값을 결합할 경우 + 연산자 사용 -->
		<bind name="keyword" value="'%'+searchKeyword+'%'" />
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
		from myhewon
		where ${searchColumn} like #{keyword} order by hewon_id
	</select>

	<!-- 이름을 전달받아 MYHEWON 테이블에 저장된 해당 이름의 회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<select id="selectNameHewonList" parameterType="string"
		resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email,
		hewon_status from myhewon
		where hewon_name = #{name} order by hewon_id
	</select>

	<!-- 동적 SQL(Dynamic SQL) : 전달값에 따라 엘리먼트에 다른 SQL 명령을 등록하는 기능 -->
	<!-- => OGNL(Object Graph Navigation Language) 표현식을 사용하여 구현 -->

	<!-- 이름을 전달받지 못한 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하여 검색결과를 객체로 제공하고 이름을 전달받은 
		경우 MYHEWON 테이블에 저장된 해당 이름의 회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<!-- => 동적 SQL 기능을 사용하여 전달값에 따라 SQL 명령을 다르게 등록되어 사용되도록 설정 -->
	<select id="selectDynamicNameHewonList" parameterType="string"
		resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
		from myhewon
		<!-- if 엘림먼트 : 조건에 의해 엘리먼트 내용(SQL의 부분 명령)의 포함여부를 설정하는 엘리먼트 -->
		<!-- => if 엘리먼트의 조건이 참인 경우 엘리먼트 내용을 SQL 명령에 포함 -->
		<!-- test 속성 : false(엘리먼트 내용 미포함) 또는 true(엘리먼트 내용 포함) 중 하나를 속성값으로 설정 -->
		<!-- => parameterType 속성값으로 전달값에 대한 조건식을 작성하여 test 속성값으로 제공 -->
		<if test="name != null and name != ''"><!-- 조건 : 전달값(이름)이 있는 경우 >> [true] -->
			where hewon_name = #{name}
		</if>
		order by hewon_id
	</select>

	<!-- 아이디와 이름을 전달받지 못한 경우 MYHEWON 테이블에 저장된 모든 회원정보를 검색하여 검색결과를 객체로 제공하고 아이디 
		또는 이름을 전달받은 경우 MYHEWON 테이블에 저장된 해당 아이디 또는 이름의 회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<!-- 문제점)아이디와 이름를 모두 전달받은 경우 WHERE 문장이 2번 포함되어 에러 발생 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon <if test="id != null and id != ''"> where hewon_id = #{id} </if> 
		<if test="name != null and name != ''"> where hewon_name = #{name} </if> 
		order by hewon_id </select> -->

	<!-- 해결법-1)아이디와 이름를 모두 전달받아도 하나의 WHERE 문장만 포함되도록 동적 SQL 기능 구현 -->
	<!-- choose : 조건에 맞는 하나의 엘리먼트 내용(SQL의 부분 명령)이 SQL 명령에 포함되도록 설정하는 엘리먼트 -->
	<!-- => 하위 엘리먼트 : when 엘리먼트(1개 이상), otherwise 엘리먼트(0개 또는 1개) -->
	<!-- when : 조건에 의해 엘리먼트 내용을 SQL 명령에 포함하는 엘리먼트 -->
	<!-- => when 엘리먼트의 조건에 맞는 엘리먼트 내용을 SQL 명령에 포함한 후 choose 엘리먼트 종료 -->
	<!-- test 속성 : false(엘리먼트 내용 미포함) 또는 true(엘리먼트 내용 포함) 중 하나를 속성값으로 설정 -->
	<!-- otherwise : when 엘리먼트의 모든 조건이 거짓인 경우 엘리먼트 내용을 SQL 명령에 포함하는 엘리먼트 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon <choose> <when test="id != null and id != ''"> where hewon_id = #{id} 
		</when> <when test="name != null and name != ''"> where hewon_name = #{name} 
		</when> </choose> order by hewon_id </select> -->

	<!-- 해결법-2)아이디와 이름를 모두 전달받아 하나의 WHERE 문장만 포함되도록 동적 SQL 기능 구현 -->
	<!-- trim : 엘리먼트 내용에 필요한 부분 명령을 추가하거나 불필요한 부분 명령을 삭제하여 SQL 명령에 포함하는 엘리먼트 
		- 하위 엘리먼트로 여러개의 if 엘리먼트 사용 -->
	<!-- prefix 속성 : trim 엘리먼트에 엘리먼트 내용이 존재할 경우 엘리먼트 내용 앞에 추가될 부분 SQL 명령을 속성값 
		설정 -->
	<!-- suffix 속성 : trim 엘리먼트에 엘리먼트 내용이 존재할 경우 엘리먼트 내용 뒤에 추가될 부분 SQL 명령을 속성값 
		설정 -->
	<!-- prefixOverrides 속성 : trim 엘리먼트에 엘리먼트 내용이 존재할 경우 엘리먼트 내용에서 제거될 앞에 존재하는 
		부분 SQL 명령을 속성값으로 설정 -->
	<!-- suffixOverrides 속성 : trim 엘리먼트에 엘리먼트 내용이 존재할 경우 엘리먼트 내용에서 제거될 뒤에 존재하는 
		부분 SQL 명령을 속성값으로 설정 -->
	<!-- <select id="selectDynamicHewonList" parameterType="map" resultMap="myHewonResultMap"> 
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status from 
		myhewon <trim prefix="where" prefixOverrides="or|and"> <if test="id != null 
		and id != ''"> hewon_id = #{id} </if> <if test="name != null and name != 
		''"> ${choice} hewon_name = #{name} </if> </trim> order by hewon_id </select> -->

	<!-- where : 엘리먼트 내용이 있는 경우 엘리먼트 내용 앞부분에 [and] 또는 [or] 키워드가 있으면 제거하고 엘리먼트 
		앞부분에 [where] 키워드를 추가하여 SQL 명령에 포함하는 엘리먼트 -->
	<select id="selectDynamicHewonList" parameterType="map"
		resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
		from myhewon
		<where>
			<if test="id != null and id != ''">
				hewon_id = #{id}
			</if>
			<if test="name != null and name != ''">
				${choice} hewon_name = #{name}
			</if>
		</where>
		order by hewon_id
	</select>

	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 회원정보를 변경하는 엘리먼트 -->
	<!-- => 아이디를 비교하여 아이디를 제외한 컬럼값을 전달값으로 변경 -->
	<update id="updateHewon" parameterType="MyHewon">
		update myhewon set
		hewon_name=#{name}, hewon_phone=#{phone}, hewon_email=#{email}
		, hewon_status=#{status} where hewon_id=#{id}
	</update>

	<!-- 회원정보를 전달받아 MYHEWON 테이블에 저장된 회원정보를 변경하는 엘리먼트 -->
	<!-- => 아이디를 비교하여 전달값이 있는 경우에만 아이디를 제외한 컬럼값을 전달값으로 변경 -->
	<!-- if 엘리먼트의 test 속성값으로 조건식을 사용할 경우 비교 연산자(>, <, >=, <=)를 사용하면 에러 발생 -->
	<!-- => 기호로 표현된 비교 연산자 대신 문자로 표현된 연산자(gt, lt, gte, lte) 사용하여 표현 -->
	<!-- <update id="updateDynamicHewon" parameterType="MyHewon"> update myhewon 
		<trim prefix="set" suffixOverrides=","> <if test="name != null and name != 
		''"> hewon_name=#{name}, </if> <if test="phone != null and phone != ''"> 
		hewon_phone=#{phone}, </if> <if test="email != null and email != ''"> hewon_email=#{email}, 
		</if> <if test="status gte 1 and status lte 4"> hewon_status=#{status} </if> 
		</trim> where hewon_id=#{id} </update> -->

	<!-- set : 엘리먼트 내용이 있는 경우 엘리먼트 내용 뒷부분에 [,] 기호가 있으면 제거하고 엘리먼트 앞부분에 [set] 
		키워드를 추가하여 SQL 명령에 포함하는 엘리먼트 -->
	<update id="updateDynamicHewon" parameterType="MyHewon">
		update myhewon
		<set>
			<if test="name != null and name != ''">
				hewon_name=#{name},
			</if>
			<if test="phone != null and phone != ''">
				hewon_phone=#{phone},
			</if>
			<if test="email != null and email != ''">
				hewon_email=#{email},
			</if>
			<if test="status gte 1 and status lte 4">
				hewon_status=#{status}
			</if>
		</set>
		where hewon_id=#{id}
	</update>

	<!-- 여러개의 아이디를 전달받아 MYHEWON 테이블에 저장된 해당 아이디의 회원정보를 검색하여 검색결과를 객체로 제공하는 엘리먼트 -->
	<!-- => 아이디가 하나도 전달되지 않은 경우 MYHEWON 테이블의 모든 검색하여 객체로 제공 -->
	<!-- parameterType 속성값으로 ArrayList 클래스(List 인터페이스)를 설정하여 List 객체를 전달받아 SQL 
		명령에서 [list] 이름으로 표현하여 사용 -->
	<select id="selectMultiDynamicHewonList" parameterType="list"
		resultMap="myHewonResultMap">
		select hewon_id, hewon_name, hewon_phone, hewon_email, hewon_status
		from myhewon
		<if test="list != null">
			where hewon_id in
			<!-- foreach : 전달받은 List 객체의 요소값을 반복적으로 제공받아 SQL 명령에 포함하는 엘리먼트 -->
			<!-- collection 속성 : 반복 처리하기 위한 List 객체의 이름을 속성값으로 설정 -->
			<!-- item 속성 : list 객체의 요소값을 저장하여 SQL 명령으로 사용하기 위한 이름을 속성값으로 설정 -->
			<!-- open 속성 : foreach 엘리먼트로 제공될 엘리먼트 내용 앞부분에 추가될 부분 SQL 명령을 속성값으로 설정 -->
			<!-- close 속성 : foreach 엘리먼트로 제공될 엘리먼트 내용 뒷부분에 추가될 부분 SQL 명령을 속성값으로 설정 -->
			<!-- separator 속성 : List 객체의 요소값을 구분하기 위한 부분 SQL 명령을 속성값으로 설정 -->
			<foreach collection="list" item="id" open="(" close=")"
				separator=",">
				#{id}
			</foreach>
		</if>
	</select>
</mapper> 
