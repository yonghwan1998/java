<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis 환경설정파일 : SqlSessionFactory 객체를 생성하기 위해 필요한 정보를 제공하는 파일 -->
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- properties : property 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<!-- resource 속성 : Properties 파일의 경로를 속성값으로 설정 - 생략 가능 -->
	<!-- => property 엘리먼트 대신 Properties 파일의 등록된 정보를 이용하여 이름으로 값을 제공받아 사용 -->
	<properties resource="oracle_url.properties">
		<!-- property : mybatis 환경설정파일에 필요한 값을 제공하기 위한 엘리먼트 -->
		<!-- => 다른 엘리먼트에서 ${이름} 형식으로 property 엘리먼트로 제공되는 값을 사용 -->
		<!-- => 다수의 엘리먼트에서 공통적으로 사용되는 값을 제공하기 위해 설정 - 유지보수의 효율성 증가 -->
		<property name="oracleDriver"
			value="oracle.jdbc.driver.OracleDriver" />
	</properties>

	<!-- settings : setting 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<settings>
		<!-- setting : mybatis 실행시 필요한 정보를 제공하기 위한 엘리먼트 -->
		<!-- => setting 엘리먼트를 사용하지 않아도 실행에 필요한 값은 기본값으로 제공받아 사용 -->
		<!-- => mybatis 실행을 기본값을 제외한 값으로 제공받아 사용할 경우에만 setting 엘리먼트 설정 -->
		<!-- callSettersOnNulls 옵션을 [true]로 설정하면 UPDATE 명령 실행시 컬럼값을 [NULL]로 변경하는 
			기능을 허용 -->
		<setting name="callSettersOnNulls" value="true" />
		<!-- mapUnderscoreToCamelCase 옵션을 [true]로 설정하면 SELECT 명령 실행시 스네이크 표기법으로 
			작성된 컬럼명을 자동으로 카멜 표기법의 컬럼명으로 변환하여 검색하는 기능을 제공받아 사용 -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
	</settings>

	<!-- typeAliases : typeAlias 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<typeAliases>
		<!-- typeAlias : XML 기반의 매퍼 파일에서 Java 자료형에 대신 사용할 수 있는 별칭 (AliasName)을 
			설정하기 위한 엘리먼트 -->
		<!-- => mybatis 프레임워크는 내부적으로 Java 자료형에 대신 사용할 별칭 제공 -->
		<!-- type 속성 : Java 자료형을 속성값으로 설정 -->
		<!-- alias 속성 : Java 자료형 대신 사용될 별칭을 속성값으로 설정 -->
		<!-- <typeAlias type="xyz.itwill.dto.Student" alias="Student"/> -->
		<!-- <typeAlias type="xyz.itwill.dto.MyMember" alias="MyMember"/> -->

		<!-- package : 특정 패키지에 작성된 모든 클래스에 별칭을 자동 등록하는 엘리먼트 -->
		<!-- => 패키지에 작성된 클래스는 패키지를 제외한 클래스 이름을 별칭으로 자동 등록 -->
		<package name="xyz.itwill.dto" />
	</typeAliases>

	<!-- environments : environment 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<!-- default 속성 : environment 엘리먼트의 식별자(id 속성값)을 속성값으로 설정 -->
	<!-- => mybatis 프레임워크가 기본적으로 사용하기 위한 DBMS 서버 지정 -->
	<environments default="development">
		<!-- environment : DBMS 서버 접속에 필요한 정보를 설정하기 위한 엘리먼트 -->
		<!-- => Connection 객체를 생성하기 위한 정보를 제공 -->
		<!-- id 속성 : environment 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
		<environment id="development">
			<!-- transactionManager : 트렌젝션 관리자(커밋 또는 롤백 처리)를 설정하기 위한 엘리먼트 -->
			<!-- type 속성 : [JDBC] 또는 [MANAGED] 중 하나를 속성값으로 설정 -->
			<!-- => JDBC 속성값 : JDBC 기능을 사용하여 직접 트렌젝션 관리 - Connection 객체의 메소드 호출 -->
			<!-- => MANAGED 속성값 : 트렌젝션 관리 프로그램을 사용하여 트렌젝션 관리 -->
			<transactionManager type="JDBC" />
			<!-- dataSource : Connection 객체를 생성하기 위한 정보를 제공하는 엘리먼트 -->
			<!-- type 속성 : [UNPOOLED], [POOLED], [JNDI] 중 하나를 속성값으로 설정 -->
			<!-- => type 속성값에 따라 하위 엘리먼트 설정 변경 -->
			<!-- => UNPOOLED 속성값 : Connection 객체를 미리 생성하지 않고 실행시 생성하여 제공 -->
			<!-- => POOLED 속성값 : Connection 객체를 미리 생성하여 실행시 제공 - DBCP -->
			<!-- => JNDI 속성값 : WAS 프로그램에 등록된 자원을 이용하여 Connection 객체를 실행시 제공 -->
			<dataSource type="POOLED">
				<!-- property : Connection 객체 생성에 필요한 값을 제공하는 엘리먼트 -->
				<!-- name 속성 : Connection 객체 생성에 필요한 값이 저장될 이름을 속성값으로 설정 -->
				<!-- value 속성 : Connection 객체 생성에 필요한 값을 속성값으로 설정 -->
				<!-- <property name="driver" value="oracle.jdbc.driver.OracleDriver"/> -->
				<property name="driver" value="${oracleDriver}" />
				<!-- <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
				<property name="url" value="${local}" />
				<property name="username" value="scott" />
				<property name="password" value="tiger" />
			</dataSource>
		</environment>
	</environments>

	<!-- mappers : mapper 엘리먼트를 등록하기 위한 상위 엘리먼트 -->
	<mappers>
		<!-- mapper : 매퍼 파일(Mapper File)을 매퍼(Mapper)로 등록하기 위한 엘리먼트 -->
		<!-- 매퍼(Mapper) : SQL 명령에 필요한 값을 전달받아 SQL 명령을 등록하고 실행결과를 Java 객체(원시형)으로 
			매핑하기 위한 정보를 제공 -->
		<!-- => mybatis 프레임워크에서는 XML 기반의 매퍼 파일과 Interface 기반의 매퍼 파일을 이용하여 매퍼 등록 
			가능 -->
		<!-- => ibatis 프레임워크에서는 XML 기반의 매퍼 파일로만 매퍼 등록 가능 -->

		<!-- resource 속성 : XML 기반의 매퍼 파일 경로를 속성값으로 설정 -->
		<!-- => XML 기반의 매퍼 파일 경로는 파일 시스템 경로로 표현하여 작성 -->
		<!-- XML 기반의 매퍼 파일의 장점 : 수동 매핑 설정과 동적 SQL 설정에 대한 기능 구현 편리 -->
		<!-- XML 기반의 매퍼 파일의 단점 : SqlSession 객체로 SQL 명령을 제공받아 사용하기 불편 -->
		<mapper resource="xyz/itwill/mapper/StudentMapper.xml" />
		<mapper resource="xyz/itwill/mapper/MyMemberXMLMapper.xml" />

		<!-- class 속성 : Interface 기반의 매퍼 파일의 경로를 속성값으로 설정 -->
		<!-- => Interface 기반의 매퍼 파일의 경로는 Java 자료형(인터페이스)으로 표현하여 작성 -->
		<!-- Interface 기반의 매퍼 파일의 장점 : SqlSession 객체로 SQL 명령을 제공받아 사용하기 편리 -->
		<!-- Interface 기반의 매퍼 파일의 단점 : 수동 매핑 설정과 동적 SQL 설정에 대한 기능 구현 불편 -->
		<!-- <mapper class="xyz.itwill.mapper.MyMemberInterfaceMapper"/> -->

		<!-- 매퍼 바인딩 기능을 사용하여 XML 기반의 매퍼 파일과 Interface 기반의 매퍼 파일을 하나의 매퍼로 등록되어 동작되도록 
			설정 가능 -->
		<!-- 매퍼 바인딩(Mapper Binding) : SQL 명령은 XML 기반의 매퍼 파일에 등록하고 DAO 클래스는 Interface 
			기반의 매퍼 파일을 이용하여 작성 -->
		<!-- => mapper 엘리먼트에는 XML 기반의 매퍼 파일만 등록하여 사용하는 것을 권장 -->
		<!-- <mapper resource="xyz/itwill/mapper/MyMemberMapper.xml"/> -->

		<!-- package : 특정 패키지에 작성된 모든 Interface 기반의 매퍼 파일을 매퍼로 자동 등록하기 위한 엘리먼트 -->
		<!-- name 속성 : Interface 기반의 매퍼 파일이 작성된 패키지를 속성값으로 설정 -->
		<package name="xyz.itwill.mapper" />
	</mappers>
</configuration>