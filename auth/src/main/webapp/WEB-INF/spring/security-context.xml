<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


	<!-- http : Spring Security 기능을 SpringMVC 프로그램에 적용하기 위한 정보를 제공하는 엘리먼트 -->
	<!-- => Spring Security 관련 환경 설정이 시작되는 위치를 제공 -->
	<!-- use-expressions 속성 : false 또는 true(기본값) 중 하나를 속성값으로 설정 -->
	<!-- => use-expressions 속성값을 [true]로 설정하면 SpEL 표현식을 사용하여 페이지 접근 여부 설정 가능 -->
	<!-- SpEL 표현식 -->
	<!-- => hasRole('role') : 권한을 가지고 있는 경우를 표현 -->
	<!-- => hasAnyRole('role1', 'role2', ...) : 나열된 권한들 중 하나를 가지고 있는 경우를 표현 -->
	<!-- => permitAll : 모든 사용자의 접근 가능을 표현 -->
	<!-- => denyAll : 모든 사용자의 접근 불가능을 표현 -->
	<!-- => isAnonymous() : Anonymous 사용자(인증 받지 않은 사용자)인 경우에만 접근 가능 -->
	<!-- => isRememberMe() : Remember-me 기능으로 로그인한 사용자인 경우에만 접근 가능 -->
	<!-- => isAuthenticated() : 인증 처리된 사용자(Remember-me 기능의 사용자 포함)인 경우에만 접근 
		가능 -->
	<!-- => isFullyAuthenticated() : 인증 처리된 사용자(Remember-me 기능의 사용자 제외)인 경우에만 
		접근 가능 -->
	<http auto-config="true" use-expressions="true">
		<!-- use-expressions 속성값을 [false]를 사용한 경우 access 속성값으로 SpEL 표현식 사용 불가능 -->
		<!-- => intercept-url 엘리먼트를 사용하여 페이지에 접근 가능한 권한을 하나만 설정 가능 -->
		<!-- <intercept-url pattern="/user/**" access="ROLE_USER"/> <intercept-url 
			pattern="/manager/**" access="ROLE_MANAGER"/> <intercept-url pattern="/admin/**" 
			access="ROLE_ADMIN"/> -->

		<!-- intercept-url : 요청 페이지에 접근 가능한 권한을 설정하는 엘리먼트 -->
		<!-- => 특정 페이지에 대한 권한 설정을 먼저하고 나머지는 마지막에 설정하는 것을 권장 -->
		<!-- pattern 속성 : 요청 페이지의 URL 주소를 속성값으로 설정 -->
		<!-- => * 또는 ** 등의 패턴문자를 사용하여 속성값 설정 가능 -->
		<!-- access 속성 : 페이지에 접근 가능한 권한(Role)을 속성값으로 설정 -->
		<!-- => use-expressions 속성을 [true]인 경우 SpEL를 사용하여 권한 설정 가능 -->
		<!-- => 권한이 없는 사용자가 페이지를 요청할 경우 AccessDeniedException 예외 발생 -->
		<intercept-url pattern="/guest/**"
			access="hasAnyRole('ROLE_USER', 'ROLE_MANAGER', 'ROLE_ADMIN')" />
		<intercept-url pattern="/user/**"
			access="hasRole('ROLE_USER')" />
		<intercept-url pattern="/manager/**"
			access="hasRole('ROLE_MANAGER')" />
		<intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/**" access="permitAll" />

		<!-- form-login : form 방식의 로그인 페이지를 설정하기 위한 엘리먼트 -->
		<!-- => 속성을 사용하지 않은 경우 Spring Security의 로그인 페이지를 제공 -->
		<!-- login-page : 아이디와 비밀번호를 입력받기 위한 로그인 페이지의 URL 주소를 속성값으로 설정 -->
		<!-- login-processing-url : 아이디와 비밀번호를 전달받아 인증 처리하는 페이지의 URL 주소를 속성값으로 
			설정 -->
		<!-- username-parameter : 아이디를 전달하기 위한 이름을 속성값으로 설정 -->
		<!-- default-target-url : 로그인 성공시 이동될 페이지의 URL 주소를 속성값으로 설정 -->
		<!-- Spring Security는 인증 성공 후 기본적으로 SaveRequestAwareAuthenticationSuccessHandler 
			클래스를 이용하여 사용자가 원래 요청한 페이지의 정보를 유지하여 요청 페이지로 이동되도록 처리 -->
		<!-- <form-login login-page="/loginPage" login-processing-url="/loginPage" 
			username-parameter="userid" password-parameter="passwd" default-target-url="/"/> -->

		<!-- authentication-success-handler-ref 속성 : AuthenticationSuccessHandler 
			인터페이스를 상속받은 클래스에 대한 Spring Bean의 식별자(beanName)를 속성값으로 설정 -->
		<form-login login-page="/loginPage"
			login-processing-url="/loginPage" username-parameter="userid"
			password-parameter="passwd" default-target-url="/"
			authentication-success-handler-ref="customLoginSuccessHandler"
			authentication-failure-handler-ref="customLoginFailuerHandler" />

		<!-- access-denied-handler : AccessDeniedException 발생된 경우 403 에러코드를 전달하는 
			대신 에러 메세지로 응답결과를 제공하기 위한 엘리먼트 -->
		<!-- error-page 속성 : 403 에러코드 대신 응답될 페이지의 URL 주소를 속성값으로 설정 -->
		<!-- <access-denied-handler error-page="/accessDenied"/> -->
		<!-- ref 속성 : AccessDeniedHandler 인터페이스를 상속받은 클래스에 대한 Spring Bean의 식별자(beanName)를 
			속성값으로 설정 -->
		<access-denied-handler
			ref="customAccessDeniedHandler" />
	</http>

	<!-- authentication-manager : 인증 관리자를 등록하기 위한 엘리먼트 -->
	<!-- => 다양한 형태의 인증 방식을 제공할 수 있는 기능 구현 -->
	<!-- authentication-provider : 인증 제공자를 등록하기 위한 엘리먼트 -->
	<!-- => 실질적인 인증 작업을 진행하는 기능 구현 -->
	<!-- user-service : 인증 정보를 등록하기 위한 엘리먼트 -->
	<!-- => 인증 처리를 이용하여 사용자의 권한 관련 정보를 반환하는 기능 -->
	<!-- user : 인증을 위한 정보 및 사용자의 권한 정보를 설정하는 엘리먼트 -->
	<!-- name 속성 : 사용자를 구분하기 위한 식별자(아이디)를 속성값으로 설정 -->
	<!-- password 속성 : 사용자의 비밀번호를 속성값으로 설정 -->
	<!-- => Spring Security 5.0 이상에서는 비밀번호를 반드시 암호화 처리하여 비교되도록 구현 -->
	<!-- => password 속성값으로 설정된 비밀번호 앞부분에 {noop}를 붙여 사용하면 암호화 처리하지 않아도 비교 처리 -->
	<!-- authorities 속성 : 권한(Role)를 속성값으로 설정 -->
	<!-- => 권한은 ROLE 기반으로 설정 - 속성값은 ROLE_XXX 형식으로 설정 -->
	<!-- => 사용자에게 다수의 권한을 제공할 경우 , 기호로 구분하여 등록 설정 가능 -->
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="abc123" password="{noop}123456"
					authorities="ROLE_USER" />
				<user name="xyz789" password="{noop}123456"
					authorities="ROLE_USER, ROLE_MANAGER" />
				<user name="opq456" password="{noop}123456"
					authorities="ROLE_ADMIN" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

	<!-- Spring Security 관련 클래스를 Spring Bean으로 등록 -->
	<beans:bean
		class="xyz.itwill.security.CustomAccessDeniedHandler"
		id="customAccessDeniedHandler" />
	<beans:bean
		class="xyz.itwill.security.CustomLoginSuccessHandler"
		id="customLoginSuccessHandler" />
	<beans:bean
		class="xyz.itwill.security.CustomLoginFailuerHandler"
		id="customLoginFailuerHandler" />
</beans:beans>