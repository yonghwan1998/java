<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- servlet-context.xml : appServlet 이름의 서블릿(Front Controller)에게 제공될 Spring 
		Bean을 등록하기 위한 Spring Bean Configuration File -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션으로 등록된 Spring Bean에서 @RequestMapping 
		어노테이션으로 등록된 요청 처리 메소드를 클라이언트 요청에 의해 자동으로 호출되어 실행될 수 있도록 설정하는 엘리먼트 -->
	<!-- => HanlderMapping 객체를 사용하지 않아 클라이언트 요청에 의해 Controller 클래스의 요청 처리 메소드가 
		호출되도록 매핑 설정 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : 클라이언트 요청을 Front Controller가 직접 응답 처리되도록 설정하는 엘리먼트 -->
	<!-- => 클라이언트가 리소스 파일 요청에 대한 응답처리를 위해 사용되는 엘리먼트 -->
	<!-- mapping 속성 : 클라이언트에 의해 요청되는 리소스 파일의 요청 URL 주소의 패턴을 속성값으로 설정 -->
	<!-- => [**] 패턴문자를 속성값으로 사용한 경우 현재 폴더 및 하위 폴더의 리소스 파일 요청 가능 -->
	<!-- location 속성 : 클라이언트 요청에 의해 리소스 파일을 검색하기 위한 폴더를 속성값으로 설정 -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- InternalResourceViewResolver 클래스를 Spring Bean으로 등록 -->
	<!-- InternalResourceViewResolver 객체 : 클라이언트 요청에 의해 호출되는 요청 처리 메소드의 반환값(ViewName)을 
		제공받아 응답 처리할 JSP 문서로 변환하여 반환하는 기능을 제공하는 객체 -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- component-scan : 스프링 컨테이너가 클래스에서 사용된 스프링 어노테이션을 검색하여 처리할 수 있는 패키지를 
		제공하는 엘리먼트 -->
	<!-- base-package 속성 : 스프링 어노테이션을 사용한 클래스가 선언된 패키지를 속성값으로 설정 -->
	<!-- <context:component-scan base-package="xyz.itwill.controller" /> -->
	<!-- [xyz.itwill10.controller] 패키지에 요청 처리 클래스(Controller 클래스)를 작성하여 @Controller 
		어노테이션을 사용하여 Spring Bean으로 등록 -->
	<context:component-scan
		base-package="xyz.itwill10.controller" />
	<!-- [xyz.itwill10.dao] 패키지에 DAO 클래스를 작성하여 @Repository 어노테이션을 사용하여 Spring 
		Bean으로 등록 -->
	<context:component-scan
		base-package="xyz.itwill10.dao" />
	<!-- [xyz.itwill10.service] 패키지에 Service 클래스를 작성하여 @Service 어노테이션을 사용하여 
		Spring Bean으로 등록 -->
	<context:component-scan
		base-package="xyz.itwill10.service" />

	<!-- TransactionManager 객체를 사용하여 트렌젝션 처리를 설정하기 위해서는 tx 네임스페이스에 spring-tx.xsd 
		파일을 제공받아 엘리먼트를 사용할 수 있도록 설정 -->
	<!-- advice : TransactionManager 객체(Spring Bean)를 Advisor로 설정하기 위한 엘리먼트 -->
	<!-- Advisor : 삽입위치(JoinPoint)가 정해져 있는 횡단관심코드의 메소드가 작성된 Advice 클래스로 생성된 
		객체(Spring Bean) -->
	<!-- id 속성 : advice 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
	<!-- transaction-manager 속성 : TransactionManager 관련 클래스의 Spring Bean에 대한 
		식별자(beanName)을 속성값으로 설정 -->
	<!-- => TransactionManager 객체(Spring Bean)을 이용하여 커밋처리 또는 롤백처리 제공 -->
	<!-- attributes : TransactionManager 객체에 의해 처리될 메소드 목록을 설정하기 위한 엘리먼트 -->
	<!-- method : TransactionManager 객체에 의해 처리될 메소드와 방식을 설정하기 위한 엘리먼트 -->
	<!-- name 속성 : TransactionManager 객체에 의해 처리될 메소드의 이름을 속성값으로 설정 -->
	<!-- => 메소드 이름에 [*] 패턴문자를 사용하여 설정 가능 -->
	<!-- rollback-for 속성 : ROLLBACK 명령이 실행될 예외를 속성값으로 설정 -->
	<!-- read-only 속성 : false(기본) 또는 true(읽기) 중 하나를 속성값으로 설정 -->
	<tx:advice id="txAdvisor"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception" />
			<tx:method name="modify*" rollback-for="Exception" />
			<tx:method name="remove*" rollback-for="Exception" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- SpringAOP 기능을 사용하기 위해서는 aop 네임스페이스에 spring-aop.xsd 파일을 제공받아 엘리먼트를 사용할 
		수 있도록 설정 -->
	<!-- => SpringAOP 기능을 사용하여 타겟메소드 호출시 TransactionManager 객체가 동작될 수 있도록 설정 -->
	<!-- advisor : Advisor(삽입위치가 지장된 Advice 객체)를 제공받아 사용하기 위한 엘리먼트 -->
	<!-- advice-ref 속성 : advice 엘리먼트의 식별자를 속성값으로 설정 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvisor"
			pointcut="execution(* xyz.itwill10.service..*(..))" />
	</aop:config>
</beans:beans>