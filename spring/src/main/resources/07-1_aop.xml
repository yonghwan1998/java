<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심관심모듈의 클래스(DAO 클래스 및 Service 클래스)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonDAOImpl" id="hewonDAO" />
	<bean class="xyz.itwill07.aop.HewonServiceImpl" id="hewonService">
		<property name="hewonDAO" ref="hewonDAO" />
	</bean>

	<!-- 횡단관심모듈의 클래스(Advice 클래스)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonAdvice" id="hewonAdvice" />

	<!-- Spring AOP(Aspect Oriented Programming - 관점 지향 프로그래밍) : AspectJ 컴파일러에 
		의해 프로그램 실행시 핵심관심코드와 횡단관심코드가 결합(Weaving)되어 실행되기 위한 기능 제공 -->
	<!-- Spring AOP 기능을 사용하기 위해서는 aspectjrt 라이브러리와 aspectjweaver 라이브러리가 프로젝트에 
		빌드 처리 - 메이븐 이용 : pom.xml -->
	<!-- Spring Bean Configuration File에서 Spring AOP 기능을 구현하기 위해 AOP 네임스페이스를 
		추가하여 spring-aop.xsd 파일의 엘리먼트를 제공받아 설정할 수 있도록 설정 -->

	<!-- config : Spring AOP 관련 설정을 제공하기 위한 엘리먼트 -->
	<aop:config>
		<!-- aspect : 핵심관심코드에 횡단관심코드를 원하는 위치에 삽입하여 실행되도록 설정하기 위한 엘리먼트 -->
		<!-- => 횡단관심코드가 삽입될 위치(JoinPoint)를 하위 엘리먼트로 설정 -->
		<!-- => 하위 엘리먼트 : before, after, after-returning, after-throwing, around -->
		<!-- ref 속성 : 횡단관심모듈로 작성된 클래스의 Spring Bean의 식별자(beanName)를 속성값으로 설정 -->
		<!-- => 횡단관심코드의 메소드를 호출하기 위해 객체를 제공받기 위한 속성 -->
		<aop:aspect ref="hewonAdvice">
			<!-- before : 타겟메소드의 명령(핵심관심코드) 실행 전 횡단관심코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<!-- method 속성 : 횡단관심코드의 메소드 이름을 속성값으로 설정 - 자동 완성 기능 사용 -->
			<!-- pointcut 속성 : 핵심관심모듈로 작성된 클래스의 Spring Bean의 메소드 중 횡단관심코드가 삽입될 메소드를 
				지정하기 위한 PointCut 표현식을 속성값으로 설정 - 타겟메소드 지정 -->
			<!-- => PointCut 표현식을 execution 명시자, within 명시자, bean 명시자로 표현하여 타겟메소드를 
				설정하며 명시자에 패턴문자와 연산자를 사용 가능 -->
			<!-- => PointCut 표현식에서 사용 가능한 패턴문자 : ..(0개 이상), *(1개 이상), ?(0개 또는 1개) -->
			<!-- => PointCut 표현식에서 사용 가능한 연산자 : !(Not), &&(And), ||(Or) -->

			<!-- execution 명시자를 이용하여 타겟메소드를 지정하는 방법 -->
			<!-- => execution 명시자는 메소드의 머릿부를 표현하여 타겟메소드 지정 -->
			<!-- 형식)execution([접근제한자] 반환형 [패키지.클래스.]메소드명(자료형,자료형,...)) -->
			<!-- => 클래스 대신 인터페이스 사용 가능 - 인터페이스를 상속받은 모든 자식클래스를 표현 -->
			<!-- => 타겟메소드로 지정되는 클래스는 반드시 Spring Bean으로 등록된 클래스만 설정 가능 -->
			<!-- => 반환형 또는 매개변수의 자료형이 클래스(인터페이스)인 경우 패키지를 포함하여 표현 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(void addHewon(xyz.itwill07.aop.Hewon))"/> -->
			<!-- 메소드의 매개변수가 0개 이상인 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))"/> -->
			<!-- 메소드의 매개변수가 1개 이상인 메소드를 타겟메소드로 지정 - 매개변수가 반드시 존재 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(*))"/> -->
			<!-- xyz.itwill07.aop 패키지(하위 패키지 미포함)의 모든 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.*.*(..))"/> -->
			<!-- xyz.itwill07.aop 패키지와 하위 패키지의 모든 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop..*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.HewonDAO.*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.Hewon*.*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* get*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="!execution(* get*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(int)) or execution(int 
				*(..))"/> -->

			<!-- within 명시자를 사용하여 타겟메소드를 지정하는 방법 -->
			<!-- => Spring Bean으로 등록된 클래스에 작성된 모든 메소드를 타겟메소드로 지정 -->
			<!-- 형식)within(패키지명.클래스명) -->
			<!-- => 클래스 대신 인터페이스 사용 불가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonDAOImpl)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonServiceImpl)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.*)"/> -->

			<!-- bean 명시자를 사용하여 타겟메소드를 지정하는 방법 -->
			<!-- => Spring Bean의 beanName으로 등록된 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- 형식)bean(beanName) -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonDAO)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonService*)"/> -->

			<!-- pointcut : Spring Bean으로 등록된 클래스(핵심관심모듈)의 메소드 중 횡단관심코드가 삽입될 타겟메소드를 
				지정하기 위한 엘리먼트 -->
			<!-- => 많이 사용되는 PointCut 표현식을 저장하여 타겟메소드로 제공하기 위해 사용 -->
			<!-- => aspect 엘리먼트 선언 전에 작성(전역)하거나 aspect 엘리먼트의 하위 엘리먼트로 작성(지역) 가능 -->
			<!-- expression 속성 : 타겟메소드를 지정하기 위한 PonitCut 표현식을 속성값으로 설정 -->
			<!-- id 속성 : pointcut 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
			<aop:pointcut
				expression="execution(* xyz.itwill07.aop.HewonDAO.*(..))"
				id="hewonDAOPointcut" />
			<aop:pointcut
				expression="execution(* xyz.itwill07.aop.HewonService.*(..))"
				id="hewonServicePointcut" />

			<!-- pointcut-ref 속성 : pointcut 엘리먼트의 식별자를 속성값으로 설정 -->
			<!-- <aop:before method="beforeLog" pointcut-ref="hewonDAOPointcut"/> -->
			<aop:before method="beforeLog"
				pointcut-ref="hewonServicePointcut" />

			<!-- after : 타겟메소드의 명령(핵심관심코드) 실행 후 횡단관심코드를 무조건 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:after method="afterLog"
				pointcut-ref="hewonServicePointcut" />

			<!-- after-returning : 타겟메소드의 명령(핵심관심코드)이 정상적으로 실행된 후 횡단관심코드를 삽입하여 실행되도록 
				설정하는 엘리먼트 -->
			<aop:after-returning method="afterReturningLog"
				pointcut-ref="hewonServicePointcut" />

			<!-- after-throwing : 타겟메소드의 명령(핵심관심코드)이 실행될 때 예외가 발생된 경우 횡단관심코드를 삽입하여 
				실행되도록 설정하는 엘리먼트 -->
			<aop:after-throwing method="afterThrowingLog"
				pointcut-ref="hewonServicePointcut" />

			<!-- around : 타겟메소드의 명령(핵심관심코드)이 실행전과 후에 횡단관심코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:around method="aroundLog"
				pointcut-ref="hewonServicePointcut" />
		</aop:aspect>
	</aop:config>
</beans>